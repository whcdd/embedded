Config-Send：FFFD0C0093050211051211223344AABB
FFFD0C0093050211051211223344AABB单个舵机命令配置时，测试通过
共16个字节

FFFD0C0093050211051211223344AABB

FFFD180093050211051211223344010311080102030405060708AABB

FFFD240093050211051211223344010311080102030405060708010311081020304050607080AABB


FFFD32009305021105121122334401031108010203040506070801031108102030405060708005acbc03a1b1c105efce045a5b5cAABB

测试时发送函数有问题，目前已改回系统自带，功能通了着重改这里

4.此版本将基本功能实现待调试。基本功能组帧方面只提取了舵机的帧，还未继续优化
v5.此版本为测试版本
a.首先测试配置命令接收
1.发送测试无问题
2.实现流程测试：将发送数据通过串口4打出，将各个流程打桩数据通过DXL串口输出
问题1：获取接收的数据长度不对，测试用例错误



待优化：数据处理时直接用的接收缓存，待优化


FFFD32009305021105121122334401031108010203040506070801031108102030405060708005ACBC03A1B1C105EFCE045A5B5CAABB00000000000000000000000000000000000000000000000000000000000000000000000000
FFFD32009305021105121122334401031108010203040506070801031108102030405060708005acbc03a1b1c105efce045a5b5cAABB


FF FD 2F 00 93 05 02 11 05 12 11 22 33 44 05 03 11 05 01 02 03 04 05 01 03 11 08 10 20 30 40 50 60 70 80 05 CA BC 03 A1 B1 C1 05 EF CE 03 5A 5B 5C AA BB 

Config-Send 已调通 差CRC校验没测



待测试组帧版本：



6.24调试计划：
1.先测试多读时组帧的数是否能组对:已完成
 a.先发送舵机的多读指令
 b.再从舵机发送三包数据
 c.看接收是否准确
2.测试通过后试着按标准形式拼包，预留IMU位置
3.记得检查所有全局数组，确定一次用完后是否需要清零，如果不malloc ，直接free，能清零吗？
用memset清零



FFFD17009205820010FFFFFD00FE090082840004000102CEFAaabb      发送读请求舵机sync read 

FFFD1A009202112205820010FFFFFD00FE090082840004000102CEFAaabb   加上IMU读命令
FFFA1B009205920014FFFFFD00FE0D0092019000020002920001001A05aabb    BULK READ


下一步验证：1.在Wizard上验证bulk read 回传数据及顺序
2.在代码中写入多读命令。用不处理的代码
3.验证通过后在自己的代码中验证


FFFFFD00FE0D0092019000020003920001006185   多读指令
FFFD1B009205920014FFFFFD00FE0D0092019000020003920001006185aabb 
FFFD230055050000FFFFFD000106005509500CCA5FFFFFD003050055000A6C00000000005125FF、






与上位机联调自测试：
错误表：
1.包头校验错误：0xAB,0xCD
2.包总长度校验错误：0xAC,0xBF
3.CRC校验错误：



v31_IMU：此版本将IMU，bulk read 功能验证，sync read 功能实现暂未验证    2020/7.10

v32：此版本舵机IMU功能实现    2020/7.13
v33：此版本增加舵机返回数据错误的容错处理    2020/7.13
v34：此版本将看门狗及欠过压保护功能移植进去    2020/7.13

FFFA1A009202112205820010FFFFFD00FE090082840004000102cefaaabb

FFFFFD000108005500A60000008CC0
FFFFFD0002080055001F080000BABE





FFFA1B009205920014FFFFFD00FE0D0092019000020003920001006185  

FFFFFD0001060055007700C369
FFFFFD000205005500248BA9




